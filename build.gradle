buildscript {
    repositories {
        jcenter()
        maven { url = "http://files.minecraftforge.net/maven" }
    }
    dependencies {
        classpath 'net.minecraftforge.gradle:ForgeGradle:2.3-SNAPSHOT'
    }
}
apply plugin: 'net.minecraftforge.gradle.forge'


file "build.properties" withReader {
    def prop = new Properties()
    prop.load(it)
    ext.config = new ConfigSlurper().parse prop
}

version = "${config.minecraft.version}-${config.mod.version}"
group= "org.dave.compactmachines3" // http://maven.apache.org/guides/mini/guide-naming-conventions.html
archivesBaseName = "compactmachines3"

sourceCompatibility = targetCompatibility = "1.8" // Need this here so eclipse task generates correctly.
compileJava {
    sourceCompatibility = targetCompatibility = "1.8"
}

minecraft {
    version = "${config.minecraft.version}-${config.forge.version}"
    runDir = "run"

    mappings = "stable_39"
}

repositories {
    maven { // The repo from which to get waila
        name "Mobius Repo"
        // url "http://mobiusstrip.eu/maven"
        url "http://tehnut.info/maven"
    }

    maven { // TheOneProbe
        name 'tterrag maven'
        url "http://maven.tterrag.com/"
    }

    maven { // location of the maven that hosts JEI files
        name "Progwml Repo"
        url "http://dvs1.progwml6.com/files/maven"
    }

    maven { // jei by ip, because travis couldn't resolve it?!
        name "Progwml Repo"
        url "http://104.168.20.187/files/maven"
    }

    maven {
        name = "CoFH Maven"
        url = "http://maven.covers1624.net"
    }

    maven {
        name = "ChickenBones Maven"
        url = "http://chickenbones.net/maven/"
    }

    maven {
        name = "refinedstorage"
        url = "https://repo.refinedmods.com/"
    }

    maven {
        name = "opencomputers"
        url = "http://maven.cil.li/"
    }
}

dependencies {
    deobfCompile "mezz.jei:jei_${config.minecraft.version}:${config.jei.version}:api"
    //runtime "mezz.jei:jei_${config.minecraft.version}:${config.jei.version}"

    deobfCompile "mcp.mobius.waila:Hwyla:${config.waila.version}:api"

    deobfCompile("mcjty.theoneprobe:TheOneProbe-1.12:1.12-1.4.19-11") {
        transitive = false
    }

    deobfCompile "refinedstorage:refinedstorage:${config.rs.version}:api"

    deobfCompile "li.cil.oc:OpenComputers:${config.oc.version}:api"


    // All of the following are needed to make Ducts connect to each other visually
    // in recipes and in the machine view. :(
    deobfCompile("cofh:ThermalDynamics:${config.minecraft.version}-${config.cofh.thermaldynamics.version}:universal") {
        transitive = false
    }

    deobfCompile("cofh:CoFHCore:${config.minecraft.version}-${config.cofh.core.version}:universal") {
        transitive = false
    }

    // And some runtime-dependencies for the above two libraries.
    runtime("cofh:ThermalFoundation:${config.minecraft.version}-${config.cofh.thermalfoundation.version}:universal") {
        transitive = false
    }

    runtime("cofh:ThermalExpansion:${config.minecraft.version}-${config.cofh.thermalexpansion.version}:universal") {
        transitive = false
    }

    runtime("cofh:ThermalCultivation:${config.minecraft.version}-${config.cofh.thermalcultivation.version}:universal") {
        transitive = false
    }

    runtime("cofh:CoFHWorld:${config.minecraft.version}-${config.cofh.world.version}:universal") {
        transitive = false
    }

    runtime("codechicken:CodeChickenLib:${config.minecraft.version}-${config.ccl.version}:universal") {
        transitive = false
    }
}

allprojects {
    if (System.getenv("TRAVIS") != null) {
        def tag = System.getenv("TRAVIS_TAG");
        if (tag != null && !tag.isEmpty() && tag.contains("release")) {
            project.ext.releaseType = "release"
        } else {
            version += "-b${System.getenv("TRAVIS_BUILD_NUMBER")}"
            project.ext.releaseType = "beta"
        }
    }
}

task deobfJar(type: Jar) {
    from sourceSets.main.output
    classifier = 'deobf'
}

processResources
{
    // this will ensure that this task is redone when the versions change.
    inputs.property "version", project.version
    inputs.property "mcversion", project.minecraft.version

    // replace stuff in mcmod.info, nothing else
    from(sourceSets.main.resources.srcDirs) {
        include 'mcmod.info'

        // replace version and mcversion
        expand 'version':project.version, 'mcversion':project.minecraft.version
    }

    // copy everything else, thats not the mcmod.info
    from(sourceSets.main.resources.srcDirs) {
        exclude 'mcmod.info'
    }
}
